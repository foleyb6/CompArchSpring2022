module Adder32(DataA, DataB, CarryOut, RAdd);

input [31:0] DataA, DataB;
output CarryOut;
output [31:0] RAdd;
wire W1, W2, W3, W4, W5, W6, W7, W8, W9, W10;
wire W11, W12, W13, W14, W15, W16, W17, W18, W19, W20;
wire W21, W22, W23, W24, W25, W26, W27, W28, W29, W30;
wire W31, W32;

Add1 A1 (DataA[0], DataB[0], 0, W1, RAdd[0]);
Add1 A1 (DataA[1], DataB[1], W1, W1, RAdd[0]);
Add1 A1 (DataA[2], DataB[2], W2, W1, RAdd[0]);
Add1 A1 (DataA[3], DataB[3], w3, W1, RAdd[0]);
Add1 A1 (DataA[4], DataB[4], W4, W1, RAdd[0]);
Add1 A1 (DataA[5], DataB[5], W5, W1, RAdd[0]);
Add1 A1 (DataA[6], DataB[6], W6, W1, RAdd[0]);
Add1 A1 (DataA[7], DataB[7], W7, W1, RAdd[0]);
Add1 A1 (DataA[8], DataB[8], W8, W1, RAdd[0]);
Add1 A1 (DataA[9], DataB[9], W9, W1, RAdd[0]);
Add1 A1 (DataA[10], DataB[10], W10, W1, RAdd[0]);
Add1 A1 (DataA[11], DataB[11], W11, W1, RAdd[0]);
Add1 A1 (DataA[12], DataB[12], W12, W1, RAdd[0]);
Add1 A1 (DataA[13], DataB[13], W13, W1, RAdd[0]);
Add1 A1 (DataA[14], DataB[14], W14, W1, RAdd[0]);
Add1 A1 (DataA[15], DataB[15], W15, W1, RAdd[0]);
Add1 A1 (DataA[16], DataB[16], W16, W1, RAdd[0]);
Add1 A1 (DataA[17], DataB[17], W17, W1, RAdd[0]);
Add1 A1 (DataA[18], DataB[18], W18, W1, RAdd[0]);
Add1 A1 (DataA[19], DataB[19], W19, W1, RAdd[0]);
Add1 A1 (DataA[20], DataB[20], W20, W1, RAdd[0]);
Add1 A1 (DataA[21], DataB[21], 0, W1, RAdd[0]);
Add1 A1 (DataA[22], DataB[22], 0, W1, RAdd[0]);
Add1 A1 (DataA[23], DataB[23], 0, W1, RAdd[0]);
Add1 A1 (DataA[24], DataB[24], 0, W1, RAdd[0]);
Add1 A1 (DataA[25], DataB[25], 0, W1, RAdd[0]);
Add1 A1 (DataA[26], DataB[26], 0, W1, RAdd[0]);
Add1 A1 (DataA[27], DataB[27], 0, W1, RAdd[0]);
Add1 A1 (DataA[28], DataB[28], 0, W1, RAdd[0]);
Add1 A1 (DataA[29], DataB[29], 0, W1, RAdd[0]);
Add1 A1 (DataA[30], DataB[30], 0, W1, RAdd[0]);
Add1 A1 (DataA[31], DataB[31], 0, W1, RAdd[0]);